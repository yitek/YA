/////////////////////////////////////////////////////////////
// compnent的垃圾释放机制 GR
// 9 为甚需要垃圾释放
// 主要出现在监听全局对象 与标记为output ,reference的observable
// 因为要把自己挂到外面对象的监听列表中，其他的组件就会形成对本组件的引用。
// 本组件的dispose里面有需要解除的监听列表，释放其他组件对本组件的默认引用。
// 如果本组件的对应dom节点被人用innerHTML替换掉，或者remove掉，其实本组件已经失效，
// 相关的消息不应该送达本组件，本组件也不应该再更新相关的dom
// 但到这里为止的代码无法跟踪到与本组件对应的dom是否被卸载掉
// 所以需要垃圾回收机制，去检查组件是否还“活着”,
//
// 1 如何判断本组件还活着
// A 它在dom树里面，肯定还活着。如果不在dom里里面，就要做更多的判断.
//    可以通过查找它的parent或offsetParent，看在不在body或documentElement中来判断它是否在dom树中
// B 它是特殊的组件，比如if属性为false的组件，虽然它的div不在dom里面，但说不定什么时候就把模型值改成true了，所以它也活着
//    所有组件的if为false时，我们去查看它在dom树中的replacehold是不是还在，来间接判断它是否还活着
// C 通过AB判定它不在dom树里面，它不一定就是死了。可能是代码需要移除该组件，在某个条件下，它又会被代码加回去到某个地方。
//    这种情况框架无法判断，只能提供detech机制，就是每个组件都有detch事件，引用该组件的代码要自己写detech事件。系统在调用dispose前
//    会检查detech的情况，如果有一个detech事件阻止移除，就不移除
// D 调用组件的dispose，并把它从检测列表中移除。
// 2 检测列表如何来。
//   只要render了，该component就会进入检测列表。那种new了一个组件，但却不呈现的，暂时还想不到有什么场景会这样写代码
// 3 垃圾回收何时进行
//   框架会定期做垃圾回收检查。比如setTimeout(GR,1000*60);
//   当检查列表非常大的时候，为了不让GR占用太多时间，每次GR都只检查其中一部分，比如0-999